由于Hashtable已经不怎么用了 简单了解
https://blog.csdn.net/wangxing233/article/details/79452946

HashMap与HashTable总结：
1.HashMap是继承自AbstractMap类，而HashTable是继承自Dictionary类
2.Hashtable不是驼峰命名，很久以前就有
3.Hashtable既不支持Null key也不支持Null value
4.Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法,效率低；HashMap不是线程安全的。
5.初始容量大小和每次扩充容量大小的不同  (初始size为11，扩容：newsize = oldsize*2+1)  HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍
    原因：Hashtable的侧重点是哈希的结果更加均匀，使得哈希冲突减少。当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。（Hashtable取余操作低效）   HashMap侧重hash的计算效率（位运算高效）
6.计算index的方法不同：Hashtable:[index = (hash & 0x7FFFFFFF) % tab.length]   HashMap:[hash&(table.length-1)]


ConcurrentHashMap总结：（替代Hashtable）
底层采用分段的数组+链表实现，线程安全
通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。(读操作不加锁，由于HashEntry的value变量是volatile的，也能保证读取到最新的值。)
Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术
有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁
扩容：段内扩容（段内元素超过该段对应Entry数组长度的75%触发扩容，不会对整个Map进行扩容），插入前检测需不需要扩容，有效避免无效扩容





